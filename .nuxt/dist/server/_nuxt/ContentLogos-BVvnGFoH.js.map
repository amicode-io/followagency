{"version":3,"file":"ContentLogos-BVvnGFoH.js","sources":["../../../../components/content/ContentLogos.vue"],"sourcesContent":["<template>\n  <section :id=\"id || uid\" class=\"m-logos\">\n    <div class=\"wave-container\" :style=\"{ height: containerHeight + 'px' }\">\n      <!-- SVG Sine Wave -->\n      <svg class=\"wave-svg\" :width=\"waveWidth\" :height=\"containerHeight\">\n        <path :d=\"wavePath\" stroke=\"black\" fill=\"none\" stroke-width=\"2\" />\n      </svg>\n\n      <!-- Logos Moving Along Sine Wave -->\n      <img\n        v-for=\"(item, index) in items\"\n        :key=\"index\"\n        :src=\"item.src\"\n        class=\"wave-item\"\n        :style=\"item.style\"\n        alt=\"Logo\"\n      />\n    </div>\n  </section>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onBeforeUnmount } from \"vue\";\nimport type { LogoItem } from \"~/models/LogoItem\";\n\ninterface Props {\n  id?: string;\n  logos: LogoItem[];\n}\n\nconst uid = useId();\nconst { id = \"\", logos = [] } = defineProps<Props>();\n\nconst baseAmplitude = 40;\nconst baseSpeed = ref(3);\nconst speed = ref(baseSpeed.value);\nconst waveFrequency = ref(0.004);\nconst minGap = ref(150);\nconst randomnessFactor = 0.1;\n\nconst items = ref<{ src: string; x: number; width: number; amplitude: number; style: Record<string, string> }[]>([]);\nconst time = ref(0);\nconst containerHeight = ref(0);\nconst wavePath = ref(\"\");\nconst waveWidth = ref(1024);\nlet animationFrame: number;\nlet resizeObserver: ResizeObserver | null = null;\nlet lastWindowWidth = 0;\n\nconst getRandomAmplitude = (isSmallScreen: boolean) => {\n  return (isSmallScreen ? baseAmplitude * 1.2 : baseAmplitude) * (1 + (Math.random() * 2 - 1) * randomnessFactor);\n};\n\nconst initializeItems = () => {\n  items.value = [];\n  let totalWidth = Math.max(window.innerWidth, 1024);\n  let x = 0;\n  let index = 0;\n  const isSmallScreen = window.innerWidth < 800;\n  const adjustedAmplitude = isSmallScreen ? baseAmplitude * 1.2 : baseAmplitude; // Ensuring wave is visible\n\n while (x < totalWidth * 1.7) { // <-- Spowoduje, że więcej obrazków zostanie wygenerowanych\n    let logo = logos[index % logos.length];\n    let scaledWidth = isSmallScreen ? logo.width * 0.5 : logo.width;\n\n    items.value.push({\n      src: logo.src,\n      x,\n      width: scaledWidth,\n      amplitude: getRandomAmplitude(isSmallScreen),\n      style: {\n        width: `${scaledWidth}px`,\n        height: \"auto\",\n        transform: `translate3d(${x}px, 0px, 0px) rotate(0deg)`,\n        willChange: \"transform\",\n      },\n    });\n\n    x += scaledWidth + minGap.value;\n    index++;\n  }\n\n  containerHeight.value = adjustedAmplitude * 2.5;\n  waveWidth.value = totalWidth;\n};\n\nconst generateWavePath = () => {\n  let path = `M 0 ${containerHeight.value / 2} `;\n  const isSmallScreen = window.innerWidth < 800;\n  const adjustedAmplitude = isSmallScreen ? baseAmplitude * 1.2 : baseAmplitude;\n\n  for (let x = 0; x < waveWidth.value; x += 10) {\n    const y = Math.sin((x + time.value) * waveFrequency.value) * adjustedAmplitude + containerHeight.value / 2;\n    path += `L ${x} ${y} `;\n  }\n  wavePath.value = path;\n};\n\nconst animate = () => {\n  time.value += 1;\n\n  const isSmallScreen = window.innerWidth < 800;\n  const adjustedAmplitude = isSmallScreen ? baseAmplitude * 1.2 : baseAmplitude;\n\n  items.value.forEach((item) => {\n    item.x -= speed.value;\n\n    if (item.x + item.width < 0) {\n      let maxX = Math.max(...items.value.map((i) => i.x + i.width));\n      item.x = maxX + minGap.value;\n      item.amplitude = getRandomAmplitude(isSmallScreen);\n    }\n\n    const y = Math.sin((item.x + time.value) * waveFrequency.value) * adjustedAmplitude;\n    const slope = Math.cos((item.x + time.value) * waveFrequency.value) * adjustedAmplitude * waveFrequency.value;\n    const angle = Math.atan(slope) * (180 / Math.PI); // Corrected rotation\n\n    item.style.transform = `translate3d(${item.x}px, ${y}px, 0px) rotate(${angle}deg)`;\n  });\n\n  generateWavePath();\n  animationFrame = requestAnimationFrame(animate);\n};\n\nconst handleResize = () => {\n  const currentWidth = window.innerWidth;\n  if (currentWidth === lastWindowWidth) return;\n  lastWindowWidth = currentWidth;\n\n  minGap.value = Math.min(window.innerWidth / 10, 150);\n  waveWidth.value = window.innerWidth;\n\n  if (typeof window !== \"undefined\") {\n    speed.value = baseSpeed.value / window.devicePixelRatio;\n  }\n\n  initializeItems();\n};\n\nonMounted(() => {\n  handleResize();\n  animate();\n\n  if (typeof window !== \"undefined\" && \"ResizeObserver\" in window) {\n    resizeObserver = new ResizeObserver(() => {\n      handleResize();\n    });\n    resizeObserver.observe(document.body);\n  }\n});\n\nonBeforeUnmount(() => {\n  cancelAnimationFrame(animationFrame);\n  if (resizeObserver) resizeObserver.disconnect();\n});\n</script>\n\n<style scoped lang=\"scss\">\n@import \"rfs/scss\";\n.m-logos {\n  @include rfs(8rem, \"margin-block\");\n}\n\n.wave-container {\n  position: relative;\n  width: 100%;\n  transform: translateY(-40%);\n  white-space: nowrap;\n  will-change: transform;\n}\n\n.wave-svg {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n  z-index: 1;\n  pointer-events: none;\n  opacity: 0;\n}\n\n.wave-item {\n  position: absolute;\n  bottom: 0;\n  will-change: transform;\n  z-index: 2;\n}\n</style>"],"names":[],"mappings":";;;;;;;;;;;AA8BA,UAAM,MAAM,MAAM;AAIZ,UAAA,YAAY,IAAI,CAAC;AACT,QAAI,UAAU,KAAK;AACX,QAAI,IAAK;AAChB,QAAI,GAAG;AAGhB,UAAA,QAAQ,IAAmG,EAAE;AACtG,QAAI,CAAC;AACZ,UAAA,kBAAkB,IAAI,CAAC;AACvB,UAAA,WAAW,IAAI,EAAE;AACjB,UAAA,YAAY,IAAI,IAAI;;;;;;;;;;;;;;;;;;;;"}