{"file":"ContentMenu-DMV-TFAm.js","mappings":";;;;;;;;;;;;;;;;;;;AAKO,MAAM,mBAAmB,OAAO,IAAI,kBAAkB;AAE7D,MAAA,qBAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,cAAc;AAAA,EACd,OAAO,CAAC,YAAY,eAAe,kBAAkB,aAAa;AAAA,EAClE,MAAM,GAAG,EAAE,OAAO,MAAK,GAAI;AACzB,UAAM,UAAU,IAAI,KAAK;AASzB,YAAQ,kBAAkB,IAAI;AAC9B,WAAO,CAAC,UAAU;;AAChB,UAAI,QAAQ,OAAO;AACjB,gBAAO,WAAM,YAAN;AAAA,MACf;AACM,YAAM,OAAO,MAAM,YAAY,MAAM;AACrC,UAAI,MAAM;AACR,eAAO,KAAM;AAAA,MACrB;AACM,YAAM,cAAc,MAAM,YAAY,MAAM,eAAe;AAC3D,YAAM,cAAc,MAAM,eAAe,MAAM,kBAAkB;AACjE,aAAO,mBAAmB,aAAa,OAAO,WAAW;AAAA,IAC1D;AAAA,EACL;AACA,CAAC;;;;;;AChCD,UAAM,QAAQ;AAEI,QAAI,KAAK;AACH,mBAAe,iBAAiB;AAaxD,UAAM,iBAAiB,SAAS,MAAM;AACpC,UAAI;AAEJ,UAAI;AACF,cAAM,IAAI,IAAI,MAAM,MAAM;AAE1B,YAAI,IAAI,aAAa,WAAW,IAAI,aAAa,UAAU;AACzD,iBAAO,MAAM;AAAA,QACnB;AAAA,MACG,SAAQ,GAAG;AAAA,MAEd;AAEE,aAAO,IAAI,MAAM,MAAM;AAAA,IACzB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../node_modules/nuxt/dist/app/components/client-only.js","../../../../components/atoms/MenuItem.vue"],"sourcesContent":["import { cloneVNode, createElementBlock, defineComponent, getCurrentInstance, h, onMounted, provide, ref } from \"vue\";\nimport { isPromise } from \"@vue/shared\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport ServerPlaceholder from \"./server-placeholder.js\";\nimport { elToStaticVNode } from \"./utils.js\";\nexport const clientOnlySymbol = Symbol.for(\"nuxt:client-only\");\nconst STATIC_DIV = \"<div></div>\";\nexport default defineComponent({\n  name: \"ClientOnly\",\n  inheritAttrs: false,\n  props: [\"fallback\", \"placeholder\", \"placeholderTag\", \"fallbackTag\"],\n  setup(_, { slots, attrs }) {\n    const mounted = ref(false);\n    onMounted(() => {\n      mounted.value = true;\n    });\n    if (import.meta.dev) {\n      const nuxtApp = useNuxtApp();\n      nuxtApp._isNuxtPageUsed = true;\n      nuxtApp._isNuxtLayoutUsed = true;\n    }\n    provide(clientOnlySymbol, true);\n    return (props) => {\n      if (mounted.value) {\n        return slots.default?.();\n      }\n      const slot = slots.fallback || slots.placeholder;\n      if (slot) {\n        return slot();\n      }\n      const fallbackStr = props.fallback || props.placeholder || \"\";\n      const fallbackTag = props.fallbackTag || props.placeholderTag || \"span\";\n      return createElementBlock(fallbackTag, attrs, fallbackStr);\n    };\n  }\n});\nconst cache = /* @__PURE__ */ new WeakMap();\n// @__NO_SIDE_EFFECTS__\nexport function createClientOnly(component) {\n  if (import.meta.server) {\n    return ServerPlaceholder;\n  }\n  if (cache.has(component)) {\n    return cache.get(component);\n  }\n  const clone = { ...component };\n  if (clone.render) {\n    clone.render = (ctx, cache2, $props, $setup, $data, $options) => {\n      if ($setup.mounted$ ?? ctx.mounted$) {\n        const res = component.render?.bind(ctx)(ctx, cache2, $props, $setup, $data, $options);\n        return res.children === null || typeof res.children === \"string\" ? cloneVNode(res) : h(res);\n      }\n      return elToStaticVNode(ctx._.vnode.el, STATIC_DIV);\n    };\n  } else if (clone.template) {\n    clone.template = `\n      <template v-if=\"mounted$\">${component.template}</template>\n      <template v-else>${STATIC_DIV}</template>\n    `;\n  }\n  clone.setup = (props, ctx) => {\n    const nuxtApp = useNuxtApp();\n    const mounted$ = ref(nuxtApp.isHydrating === false);\n    const instance = getCurrentInstance();\n    if (nuxtApp.isHydrating) {\n      const attrs = { ...instance.attrs };\n      const directives = extractDirectives(instance);\n      for (const key in attrs) {\n        delete instance.attrs[key];\n      }\n      onMounted(() => {\n        Object.assign(instance.attrs, attrs);\n        instance.vnode.dirs = directives;\n      });\n    }\n    onMounted(() => {\n      mounted$.value = true;\n    });\n    const setupState = component.setup?.(props, ctx) || {};\n    if (isPromise(setupState)) {\n      return Promise.resolve(setupState).then((setupState2) => {\n        if (typeof setupState2 !== \"function\") {\n          setupState2 ||= {};\n          setupState2.mounted$ = mounted$;\n          return setupState2;\n        }\n        return (...args) => {\n          if (mounted$.value || !nuxtApp.isHydrating) {\n            const res = setupState2(...args);\n            return res.children === null || typeof res.children === \"string\" ? cloneVNode(res) : h(res);\n          }\n          return elToStaticVNode(instance?.vnode.el, STATIC_DIV);\n        };\n      });\n    } else {\n      if (typeof setupState === \"function\") {\n        return (...args) => {\n          if (mounted$.value) {\n            return h(setupState(...args), ctx.attrs);\n          }\n          return elToStaticVNode(instance?.vnode.el, STATIC_DIV);\n        };\n      }\n      return Object.assign(setupState, { mounted$ });\n    }\n  };\n  cache.set(component, clone);\n  return clone;\n}\nfunction extractDirectives(instance) {\n  if (!instance || !instance.vnode.dirs) {\n    return null;\n  }\n  const directives = instance.vnode.dirs;\n  instance.vnode.dirs = null;\n  return directives;\n}\n","<script setup>\nimport MenuComp from \"~/assets/lotties/Menu.json\";\n\nconst props = defineProps([\"target\", \"label\"]);\n\nconst playState = ref(false);\nconst lottieContainer = useTemplateRef(\"lottieContainer\");\n\nconst play = () => {\n  lottieContainer.value.setDirection(\"forward\");\n  lottieContainer.value.goToAndPlay(0);\n};\n\nconst reverse = () => {\n  const lottieLength = lottieContainer.value.getDuration(true);\n  lottieContainer.value.setDirection(\"reverse\");\n  lottieContainer.value.goToAndPlay(lottieLength);\n};\n\nconst targetComputed = computed(() => {\n  let url;\n\n  try {\n    url = new URL(props.target);\n\n    if (url.protocol === \"http:\" || url.protocol === \"https:\") {\n      return props.target;\n    }\n  } catch (_) {\n    // Invalid URL\n  }\n\n  return `#${props.target}`\n});\n</script>\n\n<template>\n  <a class=\"m-nav-item\" :href=\"targetComputed\" @mouseenter=\"play\" @mouseleave=\"reverse\">\n    <span class=\"m-nav-item__label\">{{ label }}</span>\n\n    <client-only>\n      <Vue3Lottie\n        ref=\"lottieContainer\"\n        class=\"m-nav-item__lottie\"\n        :auto-play=\"false\"\n        :animation-data=\"MenuComp\"\n        :pause-animation=\"playState\"\n        :height=\"650\"\n        :width=\"200\"\n        :loop=\"false\"\n      />\n    </client-only>\n  </a>\n</template>\n\n<style lang=\"scss\" scoped>\n@import \"rfs/scss\";\n\n@keyframes rotate-img {\n  from {\n    transform: translate(-50%, -50%) rotate(-20deg); // Start angle\n  }\n  to {\n    transform: translate(-50%, -50%) rotate(0deg); // End angle\n  }\n}\n\n.m-nav-item {\n  color: #000;\n  text-transform: uppercase;\n  text-decoration: none;\n  line-height: 1;\n  position: relative;\n\n  display: inline-flex;\n\n  &:hover,\n  &:focus {\n    .m-nav-item__label {\n      transform: scale(1.25);\n    }\n\n    .m-nav-item__lottie {\n      opacity: 1;\n    }\n  }\n}\n\n.m-nav-item__label {\n  position: relative;\n  z-index: 2;\n\n  transform-origin: 50%;\n  transition: all 0.3s ease;\n  will-change: transform;\n}\n\n.m-nav-item__lottie {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 120%;\n  min-width: 18rem;\n  // max-width: 30rem;\n  height: auto;\n  pointer-events: none;\n  z-index: 1;\n  opacity: 0.5;\n\n  transform: translate(-50%, -50%);\n  transition: transform 0.5s ease;\n  animation: rotate-img 2s linear infinite alternate;\n  will-change: transform;\n}\n</style>\n"],"version":3}