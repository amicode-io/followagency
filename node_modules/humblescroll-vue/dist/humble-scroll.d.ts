import { App } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { Config } from 'tailwindcss/types/config';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { PluginAPI } from 'tailwindcss/types/config';
import { PluginCreator } from 'tailwindcss/types/config';
import { PropType } from 'vue';
import { PublicProps } from 'vue';

declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;

declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};

export declare type HumbleEasing = 'ease-in' | 'ease-out' | 'ease-in-out' | 'ease-out-back';

declare type HumbleProps = {
    animation?: string;
    innerClass?: string;
    variables?: HumbleVariables;
    easing?: HumbleEasing;
    size?: HumbleSize;
    speed?: HumbleSpeed;
    once?: boolean;
    element?: string;
    innerElement?: string;
};

export declare const HumbleScroll: __VLS_WithTemplateSlots<DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<HumbleProps>, {
animation: string;
innerClass: string;
variables: undefined;
easing: undefined;
size: undefined;
speed: undefined;
once: undefined;
element: string;
innerElement: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
intersecting: (value: boolean) => void;
}, string, PublicProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<HumbleProps>, {
animation: string;
innerClass: string;
variables: undefined;
easing: undefined;
size: undefined;
speed: undefined;
once: undefined;
element: string;
innerElement: string;
}>>> & {
onIntersecting?: ((value: boolean) => any) | undefined;
}, {
animation: string;
innerClass: string;
variables: HumbleVariables;
easing: HumbleEasing;
size: HumbleSize;
speed: HumbleSpeed;
once: boolean;
element: string;
innerElement: string;
}, {}>, {
    default?(_: {
        isIntersecting: boolean;
    }): any;
}>;

/**
 * HumbleScroll TailwindCSS plugin.
 */
export declare const humbleScrollTailwindPlugin: {
    handler: PluginCreator;
    config?: Partial<Config> | undefined;
};

/**
 * HumbleScroll Vue Scroll Animation Plugin.
 */
export declare const humbleScrollVuePlugin: {
    install(app: App<Element>, options?: OptionalOptions): void;
};

export declare type HumbleSize = 'small' | 'medium' | 'large' | 'extra-large';

export declare type HumbleSpeed = 'extra-slow' | 'slow' | 'fast' | 'extra-fast';

export declare type HumbleVariables = {
    delay?: string;
    easing?: string;
    duration?: string;
    opacity?: string;
    translateY?: string;
    translateX?: string;
    scale?: number;
    rotate?: string;
    perspective?: string;
    rotateX?: string;
    rotateY?: string;
    skewX?: string;
    skewY?: string;
    translateRatio?: number;
    scaleRatio?: number;
    durationRatio?: number;
    translateXAmount?: string;
    translateYAmount?: string;
    flipXAmount?: string;
    flipYAmount?: string;
    perspectiveAmount?: string;
    staggerAmount?: string;
    skewAmount?: string;
    revealAmount?: string;
    blur?: string;
    blurAmount?: string;
};

export declare type Offset = {
    top: number;
    right: number;
    bottom: number;
    left: number;
};

export declare type OptionalOffset = Partial<Offset>;

export declare type OptionalOptions = Partial<Options>;

export declare type Options = {
    root: HTMLElement | null;
    threshold: number;
    repeat: boolean;
    mirror: boolean;
    offset: OptionalOffset;
};

export declare type PluginOptions = {
    addUtilities: PluginAPI['addUtilities'];
    config: () => Config;
};

export { }
